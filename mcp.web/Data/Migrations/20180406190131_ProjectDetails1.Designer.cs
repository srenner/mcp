// <auto-generated />
using mcp.web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace mcp.web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180406190131_ProjectDetails1")]
    partial class ProjectDetails1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("mcp.web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("mcp.web.Models.ProductHyperlink", b =>
                {
                    b.Property<int>("ProductHyperlinkID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int?>("ProjectItemID");

                    b.Property<string>("URL");

                    b.HasKey("ProductHyperlinkID");

                    b.HasIndex("ProjectItemID");

                    b.ToTable("ProductHyperlink");
                });

            modelBuilder.Entity("mcp.web.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int?>("ProjectID1");

                    b.Property<DateTime?>("TargetEndDate");

                    b.Property<DateTime?>("TargetStartDate");

                    b.Property<int>("VehicleID");

                    b.HasKey("ProjectID");

                    b.HasIndex("ProjectID1");

                    b.HasIndex("VehicleID");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("mcp.web.Models.ProjectItem", b =>
                {
                    b.Property<int>("ProjectItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int?>("ProductHyperlinkID");

                    b.Property<int?>("ProjectID");

                    b.Property<int?>("ProjectStepID");

                    b.Property<int?>("SortOrder");

                    b.HasKey("ProjectItemID");

                    b.HasIndex("ProductHyperlinkID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectStepID");

                    b.ToTable("ProjectItem");
                });

            modelBuilder.Entity("mcp.web.Models.ProjectStatus", b =>
                {
                    b.Property<int>("ProjectStatusID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("ProjectID");

                    b.HasKey("ProjectStatusID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectStatus");
                });

            modelBuilder.Entity("mcp.web.Models.ProjectStatusHistory", b =>
                {
                    b.Property<int>("ProjectStatusHistoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ProjectID");

                    b.Property<int>("ProjectStatusID");

                    b.Property<DateTime>("StatusDate");

                    b.Property<string>("StatusNote")
                        .HasMaxLength(4000);

                    b.HasKey("ProjectStatusHistoryID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectStatusID");

                    b.ToTable("ProjectStatusHistory");
                });

            modelBuilder.Entity("mcp.web.Models.ProjectStep", b =>
                {
                    b.Property<int>("ProjectStepID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(4000);

                    b.Property<string>("Name")
                        .HasMaxLength(500);

                    b.Property<int>("ProjectID");

                    b.Property<int?>("ProjectStepID1");

                    b.Property<int?>("StepNumber");

                    b.HasKey("ProjectStepID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ProjectStepID1");

                    b.ToTable("ProjectStep");
                });

            modelBuilder.Entity("mcp.web.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerID");

                    b.HasKey("VehicleID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("mcp.web.Models.ProductHyperlink", b =>
                {
                    b.HasOne("mcp.web.Models.ProjectItem")
                        .WithMany("AlternativeProductHyperlinks")
                        .HasForeignKey("ProjectItemID");
                });

            modelBuilder.Entity("mcp.web.Models.Project", b =>
                {
                    b.HasOne("mcp.web.Models.Project")
                        .WithMany("ProjectDependencies")
                        .HasForeignKey("ProjectID1");

                    b.HasOne("mcp.web.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mcp.web.Models.ProjectItem", b =>
                {
                    b.HasOne("mcp.web.Models.ProductHyperlink", "ProductHyperlink")
                        .WithMany()
                        .HasForeignKey("ProductHyperlinkID");

                    b.HasOne("mcp.web.Models.Project")
                        .WithMany("ProjectItems")
                        .HasForeignKey("ProjectID");

                    b.HasOne("mcp.web.Models.ProjectStep")
                        .WithMany("ProjectStepItems")
                        .HasForeignKey("ProjectStepID");
                });

            modelBuilder.Entity("mcp.web.Models.ProjectStatus", b =>
                {
                    b.HasOne("mcp.web.Models.Project")
                        .WithMany("StatusHistory")
                        .HasForeignKey("ProjectID");
                });

            modelBuilder.Entity("mcp.web.Models.ProjectStatusHistory", b =>
                {
                    b.HasOne("mcp.web.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mcp.web.Models.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("mcp.web.Models.ProjectStep", b =>
                {
                    b.HasOne("mcp.web.Models.Project", "Project")
                        .WithMany("ProjectSteps")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mcp.web.Models.ProjectStep")
                        .WithMany("ProjectStepDependencies")
                        .HasForeignKey("ProjectStepID1");
                });

            modelBuilder.Entity("mcp.web.Models.Vehicle", b =>
                {
                    b.HasOne("mcp.web.Models.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("mcp.web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("mcp.web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mcp.web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("mcp.web.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
